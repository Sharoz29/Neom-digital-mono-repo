import {
  Controller,
  Get,
  Param,
  Post,
  Body,
  HttpException,
  HttpStatus,
  Put,
  Delete,
} from '@nestjs/common';
import { ApiParam, ApiBody, ApiTags, ApiResponse } from '@nestjs/swagger';

import {Observable} from 'rxjs';

import {<%= className %>ApiService} from './<%= fileName %>-api.service';


@Controller('<%= fileName %>')
@ApiTags('<%= fileName %>')
// @CustomizeLogInterceptor({module: '<%= className %>'})
export class <%= className %>ApiController {
  constructor(private readonly _<%= propertyName %>ApiService: <%= className %>ApiService) {}

  @Get('<%= fileName %>')
  @ApiResponse({
    status: 200,
    description:
      'Successfully retrieved the record for the specified Pega user.',
  })
  @ApiResponse({
    status: 400,
    description:
      'Bad Request: The request could not be understood or was missing required parameters.',
  })
  @ApiResponse({
    status: 502,
    description: 'Bad Gateway',
  })
  @ApiResponse({
    status: 404,
    description: 'Not Found: The requested resource could not be found.',
  })
   @ApiOperation({ summary: 'Get method for <%= fileName %>'})
  get(): Observable<any> {
    const handler = () => {};
    return this._<%= propertyName %>ApiService.get('<%= className %>-get', handler);
  }

  @Post('<%= fileName %>')
  @ApiResponse({
    status: 201,
    description: 'Created: The resource has been successfully created.',
  })
  @ApiResponse({
    status: 400,
    description:
      'Bad Request: The request could not be understood or was missing required parameters.',
  })
  @ApiResponse({
    status: 502,
    description: 'Bad Gateway',
  })
  @ApiOperation({ summary: 'Post method for <%= fileName %>'})
  // @ApiBody({ type: () => {} })
  create(@Body() {}): Observable<any> {
    const handler = () => {};
    try {
      return this._<%= propertyName %>ApiService.post('<%= className %>-post', handler);
    } catch (e: any) {
      throw new HttpException(e, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }



  @Put('<%= fileName %>/:id')
  @ApiResponse({
    status: 201,
    description: 'Updated: The resource has been successfully updated.',
  })
  @ApiResponse({
    status: 400,
    description:
      'Bad Request: The request could not be understood or was missing required parameters.',
  })
  @ApiResponse({
    status: 502,
    description: 'Bad Gateway',
  })
  @ApiOperation({ summary: 'Put method for <%= fileName %>'})
  // @ApiBody({ type: () => {} })
  @ApiParam({ name: 'id', required: true })
  update(@Param() { id }: { id: string }, @Body() {}) {
    const handler = () => {};
    try {
      return this._<%= propertyName %>ApiService.put('<%= className %>-put', handler);
    } catch (error: any) {
      throw new HttpException(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Delete('<%= fileName %>/:id')
  @ApiResponse({
    status: 201,
    description: 'Deleted: The resource has been successfully deleted.',
  })
  @ApiResponse({
    status: 400,
    description:
      'Bad Request: The request could not be understood or was missing required parameters.',
  })
  @ApiResponse({
    status: 502,
    description: 'Bad Gateway',
  })
  @ApiOperation({ summary: 'Delete method for <%= fileName %>'})
  @ApiParam({ name: 'id', required: true })
  delete(@Param() { id }: { id: string }) {
    const handler = () => {};
    return this._<%= propertyName %>ApiService.delete('<%= className %>-delete', handler);
  }
}
